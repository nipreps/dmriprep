docs_deploy: &docs
  docker:
    - image: node:8.10.0
  steps:
    - checkout
    - attach_workspace:
        at: docs/_build
    - run:
        name: Disable jekyll builds
        command: touch docs/_build/html/.nojekyll
    - run:
        name: Install and configure dependencies
        command: |
          npm install -g --silent gh-pages@2.0.1
          git config user.email "nipreps@gmail.com"
          git config user.name "ci-build"
    - add_ssh_keys:
        fingerprints:
          - "29:00:83:05:e9:af:5d:0f:3b:18:7a:3f:0a:98:1a:ef"
    - run:
        name: Deploy docs to gh-pages branch
        command: gh-pages --dotfiles --message "doc(update) [skip ci]" --dist docs/_build/html

version: 2.1
orbs:
  docker: circleci/docker@1.6.0

jobs:
  build:
    machine:
      # https://discuss.circleci.com/t/linux-machine-executor-images-2021-april-q2-update/39928
      # upgrade Docker version
      image: ubuntu-2004:202104-01
    working_directory: /tmp/src/dmriprep
    environment:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
      SCRATCH: "/scratch"
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
            - build-v1--{{ .Revision }}
            - build-v1-{{ .Branch }}-
            - build-v1-master-
            - build-v1-
          paths:
            - /tmp/docker
      - docker/install-docker-credential-helper
      - run:
          name: Login into Docker Hub
          command: |
            if [[ -n "$DOCKER_PAT" ]]; then
              echo "$DOCKER_PAT" | docker login -u $DOCKER_USER --password-stdin
            fi
      - run:
          name: Set-up a Docker registry
          command: |
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images
          command: |
            set +e
            docker pull localhost:5000/ubuntu
            success=$?
            set -e
            if [[ "$success" = "0" ]]; then
                echo "Pulling from local registry"
                docker tag localhost:5000/ubuntu ubuntu:focal-20210416
                docker pull localhost:5000/dmriprep
                docker tag localhost:5000/dmriprep nipreps/dmriprep:latest
                docker tag localhost:5000/dmriprep nipreps/dmriprep
            else
                echo "Pulling from Docker Hub"
                docker pull ubuntu:focal-20210416
                docker tag ubuntu:focal-20210416 localhost:5000/ubuntu
                docker push localhost:5000/ubuntu
                docker pull nipreps/dmriprep:latest
            fi
      - run:
          name: Build Docker image
          no_output_timeout: 60m
          command: |
            export PY3=$(pyenv versions | grep '3\.' |
                         sed -e 's/.* 3\./3./' -e 's/ .*//')
            pyenv local $PY3
            # Get version, update files.
            THISVERSION=$( python3 get_version.py )
            if [[ ${THISVERSION:0:2} == "0+" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build --rm \
                --cache-from=nipreps/dmriprep \
                -t nipreps/dmriprep:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
      - run:
          name: Docker push to local registry
          no_output_timeout: 40m
          command: |
            docker tag nipreps/dmriprep:latest localhost:5000/dmriprep
            docker push localhost:5000/dmriprep
      - run:
          name: Docker registry garbage collection
          command: |
            docker exec -it registry /bin/registry garbage-collect --delete-untagged \
                /etc/docker/registry/config.yml
      - save_cache:
         key: build-v1-{{ .Branch }}-{{ .Revision }}
         paths:
            - /tmp/docker
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/dmriprep

  get_data:
    docker:
      - image: continuumio/miniconda3:4.9.2-alpine
    working_directory: /tmp/data
    environment:
      - TEMPLATEFLOW_HOME: /tmp/templateflow
    steps:
      - restore_cache:
          keys:
            - env-v1-{{ .Branch }}-
            - env-v1-master-
            - env-v1-
      - run:
          name: Setup git-annex & DataLad
          command: |
            conda install -y -c anaconda -c conda-forge git-annex datalad
            python -m pip install --no-cache-dir -U datalad-osf
            git config --global user.name 'NiPreps Bot'
            git config --global user.email 'nipreps@gmail.com'

      - run:
          name: Setup TemplateFlow
          command: |
            python -m pip install --no-cache-dir -U templateflow
            python -c "from templateflow import api as tfapi; \
                       tfapi.get('OASIS30ANTs', resolution=1, desc=None, suffix='T1w'); \
                       tfapi.get('OASIS30ANTs', resolution=1, desc='BrainCerebellumExtraction', suffix='mask'); "

      - save_cache:
          key: env-v1-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - /tmp/templateflow
            - /opt/conda

      - restore_cache:
          keys:
            - data-ds001771-v3-{{ .Branch }}-{{ .Revision }}
            - data-ds001771-v3--{{ .Revision }}
            - data-ds001771-v3-{{ .Branch }}-
            - data-ds001771-v3-master-
            - data-ds001771-v3-
      - run:
          name: Install ds001771
          command: |
            datalad install -r https://github.com/nipreps-data/ds001771.git
            datalad update -r --merge -d ds001771/
            datalad get -J 2 -r -d ds001771/ ds001771/sub-36/anat/*
            datalad get -J 2 -r -d ds001771/ ds001771/sub-36/dwi/*
            datalad get -J 2 -r -d ds001771/ ds001771/sub-36/fmap/*
            datalad get -J 2 -r -d ds001771/derivatives/ ds001771/derivatives/smriprep-0.6.0/*
            datalad get -J 2 -r -d ds001771/derivatives/ ds001771/derivatives/freesurfer-6.0.1/sub-36/mri/*
            datalad get -J 2 -r -d ds001771/derivatives/ ds001771/derivatives/freesurfer-6.0.1/sub-36/surf/lh.white \
                                                         ds001771/derivatives/freesurfer-6.0.1/sub-36/surf/rh.white \
                                                         ds001771/derivatives/freesurfer-6.0.1/sub-36/surf/lh.thickness \
                                                         ds001771/derivatives/freesurfer-6.0.1/sub-36/surf/rh.thickness

      - save_cache:
          key: data-ds001771-v3-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/data/ds001771

      - restore_cache:
          keys:
            - data-ds000206-v2-{{ .Branch }}-{{ .Revision }}
            - data-ds000206-v2--{{ .Revision }}-
            - data-ds000206-v2-{{ .Branch }}-
            - data-ds000206-v2-master-
            - data-ds000206-v2-
      - run:
          name: Install ds000206
          command: |
            datalad install -r https://github.com/nipreps-data/ds000206.git
            datalad update -r --merge -d ds000206/
            datalad get -J 2 -r -d ds000206/ ds000206/sub-05/*
            datalad get -J 2 -r -d ds000206/derivatives/ ds000206/derivatives/freesurfer-6.0.1/sub-05/*

      - save_cache:
          key: data-ds000206-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/data/ds000206

      - run:
          name: Store FreeSurfer license file
          command: |
            mkdir -p /tmp/fslicense
            cd /tmp/fslicense
            echo "cHJpbnRmICJrcnp5c3p0b2YuZ29yZ29sZXdza2lAZ21haWwuY29tXG41MTcyXG4gKkN2dW12RVYzelRmZ1xuRlM1Si8yYzFhZ2c0RVxuIiA+IGxpY2Vuc2UudHh0Cg==" | base64 -d | sh
      - run:
          name: Create Nipype config files
          command: |
            mkdir -p /tmp/config
            printf "[execution]\nstop_on_first_crash = true\n" > /tmp/config/nipype.cfg
            echo "poll_sleep_duration = 0.01" >> /tmp/config/nipype.cfg
            echo "hash_method = content" >> /tmp/config/nipype.cfg
      - persist_to_workspace:
          root: /tmp
          paths:
            - templateflow
            - fslicense
            - config/nipype.cfg

  ds000206:
    machine:
      # https://discuss.circleci.com/t/linux-machine-executor-images-2021-april-q2-update/39928
      # upgrade Docker version
      image: ubuntu-2004:202104-01
    working_directory: /tmp/ds000206
    environment:
      - FS_LICENSE: /tmp/fslicense/license.txt
    steps:
      - checkout:
          path: /home/circleci/src/dmriprep
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/dmriprep
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?ds000206\]' )" != "" ]]; then
              echo "Skipping ds000206 build"
              circleci step halt
            fi
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - data-ds000206-v2-{{ .Branch }}-{{ .Revision }}
            - data-ds000206-v2-{{ .Branch }}-{{ .Revision }}-
            - data-ds000206-v2--{{ .Revision }}-
            - data-ds000206-v2-{{ .Branch }}-
            - data-ds000206-v2-master-
            - data-ds000206-v2-
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
      - run:
          name: Set-up a Docker registry
          command: |
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images from local registry
          command: |
            docker pull localhost:5000/dmriprep
            docker tag localhost:5000/dmriprep nipreps/dmriprep:latest
      - restore_cache:
          keys:
            - ds000206-anat-v01-{{ .Branch }}-{{ .Revision }}
            - ds000206-anat-v01-{{ .Branch }}
            - ds000206-anat-v01-master
            - ds000206-anat-v01-
      - run:
          name: Run anatomical workflow on ds000206
          no_output_timeout: 2h
          command: |
            mkdir -p /tmp/ds000206/work /tmp/ds000206/derivatives
            docker run -e FS_LICENSE=$FS_LICENSE --rm \
                -v /tmp/data/ds000206:/data \
                -v /tmp/ds000206/derivatives:/out \
                -v /tmp/fslicense/license.txt:/tmp/fslicense/license.txt:ro \
                -v /tmp/config/nipype.cfg:/home/dmriprep/.nipype/nipype.cfg \
                -v /tmp/templateflow:/home/dmriprep/.cache/templateflow \
                -v /tmp/ds000206/work:/work \
                --user $(id -u):$(id -g) \
                nipreps/dmriprep:latest /data /out participant -vv \
                --fs-subjects-dir /data/derivatives/freesurfer-6.0.1 --sloppy --anat-only \
                --notrack --skip-bids-validation -w /work --omp-nthreads 2 --nprocs 2
      - run:
          name: Clean-up after anatomical run
          command: |
            rm -rf /tmp/ds000206/work/dmriprep_wf/fsdir*
            rm -rf /tmp/ds000206/work/reportlets
          when: on_success
      - save_cache:
         key: ds000206-anat-v01-{{ .Branch }}-{{ .Revision }}
         paths:
            - /tmp/ds000206/work
      - run:
          name: Run full diffusion workflow on ds000206
          no_output_timeout: 4h
          command: |
            eddy="--ignore eddy"
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[run[ _]?eddy\]' )" != "" ]]; then
              eddy=""
            fi
            mkdir -p /tmp/ds000206/work /tmp/ds000206/derivatives
            docker run -e FS_LICENSE=$FS_LICENSE --rm \
                -v /tmp/data/ds000206:/data \
                -v /tmp/ds000206/derivatives:/out \
                -v /tmp/fslicense/license.txt:/tmp/fslicense/license.txt:ro \
                -v /tmp/config/nipype.cfg:/home/dmriprep/.nipype/nipype.cfg \
                -v /tmp/templateflow:/home/dmriprep/.cache/templateflow \
                -v /tmp/ds000206/work:/work \
                --user $(id -u):$(id -g) \
                nipreps/dmriprep:latest /data /out participant -vv $eddy \
                --fs-subjects-dir /data/derivatives/freesurfer-6.0.1 --sloppy \
                --output-spaces MNI152NLin2009cAsym --use-syn-sdc \
                --notrack --skip-bids-validation -w /work --omp-nthreads 2 --nprocs 2
      - store_artifacts:
          path: /tmp/ds000206/derivatives/dmriprep
      - run:
          name: Clean working directory
          when: on_success
          command: |
            sudo rm -rf /tmp/ds000206/work
      - run:
          name: Clean working directory
          when: on_fail
          command: |
            find /tmp/ds000206/work \( -name "*.nii.gz" -or -name "*.nii" -or -name "*.gii" -or -name "*.h5" \) \
                -exec sh -c 'rm -f {}; touch {}' \;
            find /tmp/ds000206/work_partial \( -name "*.nii.gz" -or -name "*.nii" -or -name "*.gii" -or -name "*.h5" \) \
                -exec sh -c 'rm -f {}; touch {}' \;
      - store_artifacts:
          path: /tmp/ds000206/work

  ds001771:
    machine:
      # https://discuss.circleci.com/t/linux-machine-executor-images-2021-april-q2-update/39928
      # upgrade Docker version
      image: ubuntu-2004:202104-01
    working_directory: /tmp/ds001771
    environment:
      - FS_LICENSE: /tmp/fslicense/license.txt
    steps:
      - checkout:
          path: /home/circleci/src/dmriprep
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/dmriprep
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?ds001771\]' )" != "" ]]; then
              echo "Skipping ds001771 build"
              circleci step halt
            fi
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - data-ds001771-v3-{{ .Branch }}-{{ .Revision }}-
            - data-ds001771-v3--{{ .Revision }}-
            - data-ds001771-v3-{{ .Branch }}-
            - data-ds001771-v3-master-
            - data-ds001771-v3-
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
            - build-v1--{{ .Revision }}
            - build-v1-
          paths:
            - /tmp/docker
      - run:
          name: Set-up a Docker registry
          command: |
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images from local registry
          command: |
            docker pull localhost:5000/dmriprep
            docker tag localhost:5000/dmriprep nipreps/dmriprep:latest
      - run:
          name: Run full diffusion workflow on ds001771
          no_output_timeout: 4h
          command: |
            eddy="--ignore eddy"
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[run[ _]?eddy\]' )" != "" ]]; then
              eddy=""
            fi
            mkdir -p /tmp/ds001771/work /tmp/ds001771/derivatives
            docker run -e FS_LICENSE=$FS_LICENSE --rm \
                -v /tmp/data/ds001771:/data \
                -v /tmp/ds001771/derivatives:/out \
                -v /tmp/fslicense/license.txt:/tmp/fslicense/license.txt:ro \
                -v /tmp/templateflow:/home/dmriprep/.cache/templateflow \
                -v /tmp/config/nipype.cfg:/home/dmriprep/.nipype/nipype.cfg \
                -v /tmp/ds001771/work:/work \
                --user $(id -u):$(id -g) \
                nipreps/dmriprep:latest /data /out participant -vv $eddy \
                -w /work --omp-nthreads 2 --nprocs 2 \
                --notrack --skip-bids-validation --sloppy \
                --fs-subjects-dir /data/derivatives/freesurfer-6.0.1 \
                --anat-derivatives /data/derivatives/smriprep-0.6.0
      - store_artifacts:
          path: /tmp/ds001771/derivatives/dmriprep
      - run:
          name: Clean working directory
          when: on_success
          command: |
            sudo rm -rf /tmp/ds001771/work
      - run:
          name: Clean working directory
          when: on_fail
          command: |
            sudo chown $(id -un):$(id -gn) -R /tmp/ds001771
            find /tmp/ds001771/work \( -name "*.nii.gz" -or -name "*.nii" -or -name "*.gii" -or -name "*.h5" \) \
                -exec sh -c 'rm -f {}; touch {}' \;
            find /tmp/ds001771/work_partial \( -name "*.nii.gz" -or -name "*.nii" -or -name "*.gii" -or -name "*.h5" \) \
                -exec sh -c 'rm -f {}; touch {}' \;
      - store_artifacts:
          path: /tmp/ds001771/work

  deploy_docker_patches:
    machine:
      # https://discuss.circleci.com/t/linux-machine-executor-images-2021-april-q2-update/39928
      # upgrade Docker version
      image: ubuntu-2004:202104-01
    working_directory: /tmp/src/dmriprep
    steps:
      - run:
          name: Check whether image should be deployed to Docker Hub
          command: |
            if [[ "$CIRCLE_PROJECT_USERNAME" != "nipreps" ]]; then
              echo "Nothing to deploy for $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME."
              circleci step halt
            fi
      - checkout:
          path: /home/circleci/src/dmriprep
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/dmriprep
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
      - docker/install-docker-credential-helper
      - run:
          name: Login into Docker Hub
          command: |
            if [[ -n "$DOCKER_PAT" ]]; then
              echo "$DOCKER_PAT" | docker login -u $DOCKER_USER --password-stdin
            fi
      - run:
          name: Set-up a Docker registry
          command: |
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images from local registry
          command: |
            docker pull localhost:5000/dmriprep
            docker tag localhost:5000/dmriprep nipreps/dmriprep:latest
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            docker tag nipreps/dmriprep nipreps/dmriprep:${CIRCLE_BRANCH#docker/}
            docker push nipreps/dmriprep:${CIRCLE_BRANCH#docker/}

  deploy_docker:
    machine:
      # https://discuss.circleci.com/t/linux-machine-executor-images-2021-april-q2-update/39928
      # upgrade Docker version
      image: ubuntu-2004:202104-01
    working_directory: /tmp/src/dmriprep
    steps:
      - run:
          name: Check whether image should be deployed to Docker Hub
          command: |
            if [[ "$CIRCLE_PROJECT_USERNAME" != "nipreps" ]]; then
              echo "Nothing to deploy for $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME."
              circleci step halt
            fi
      - checkout:
          path: /home/circleci/src/dmriprep
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/dmriprep
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
      - docker/install-docker-credential-helper
      - run:
          name: Login into Docker Hub
          command: |
            if [[ -n "$DOCKER_PAT" ]]; then
              echo "$DOCKER_PAT" | docker login -u $DOCKER_USER --password-stdin
            fi
      - run:
          name: Set-up a Docker registry
          command: |
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images from local registry
          command: |
            docker pull localhost:5000/dmriprep
            docker tag localhost:5000/dmriprep nipreps/dmriprep:latest
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            docker tag nipreps/dmriprep nipreps/dmriprep:unstable
            docker push nipreps/dmriprep:unstable
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker push nipreps/dmriprep:latest
              docker tag nipreps/dmriprep nipreps/dmriprep:$CIRCLE_TAG
              docker push nipreps/dmriprep:$CIRCLE_TAG
            fi

  test_deploy_pypi:
    docker:
      - image: circleci/python:3.7.4
    working_directory: /tmp/src/dmriprep
    steps:
      - checkout
      - run:
          name: Install libhdf5
          command: |
            sudo apt-get install pkg-config libhdf5-103 libhdf5-dev
      - run:
          name: Start virtual environment
          command: |
            python -m venv /tmp/sdist
            source /tmp/sdist/bin/activate
            python -m pip install -U pip
            python -m pip install "setuptools>=40.8.0" twine
      - run:
          name: Build dMRIPrep
          command: |
            source /tmp/sdist/bin/activate
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            echo "${CIRCLE_TAG:-$THISVERSION}" > dmriprep/VERSION
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
      - store_artifacts:
          path: /tmp/src/dmriprep/dist
      - run:
          name: Check sdist distribution
          command: |
            source /tmp/sdist/bin/activate
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            twine check dist/dmriprep*.tar.gz
            pip install dist/dmriprep*.tar.gz
            which dmriprep | grep sdist\\/bin
            INSTALLED_VERSION=$(dmriprep --version)
            INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
            INSTALLED_VERSION=${INSTALLED_VERSION#*"dMRIPrep v"}
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VERSION\""
            test "$INSTALLED_VERSION" = "$THISVERSION"
      - run:
          name: Check wheel distribution
          command: |
            python -m venv /tmp/wheel
            source /tmp/wheel/bin/activate
            python -m pip install -U pip
            python -m pip install "setuptools>=40.8.0" twine
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            twine check dist/dmriprep*.whl
            pip install dist/dmriprep*.whl
            which dmriprep | grep wheel\\/bin
            INSTALLED_VERSION=$(dmriprep --version)
            INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
            INSTALLED_VERSION=${INSTALLED_VERSION#*"dMRIPrep v"}
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VERSION\""
            test "$INSTALLED_VERSION" = "$THISVERSION"
      - store_artifacts:
          path: /tmp/src/dmriprep/dist

  deploy_pypi:
    docker:
      - image: circleci/python:3.7.4
    working_directory: /tmp/src/dmriprep
    steps:
      - checkout
      - run:
          name: Start virtual environment
          command: |
            python -m venv /tmp/sdist
            source /tmp/sdist/bin/activate
            python -m pip install -U pip
            python -m pip install "setuptools>=40.8.0" wheel twine
      - run:
          name: Build dMRIPrep
          command: |
            source /tmp/sdist/bin/activate
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            echo "${CIRCLE_TAG:-$THISVERSION}" > dmriprep/VERSION
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
      - run:
          name: Upload packages to PyPI
          command: |
            source /tmp/sdist/bin/activate
            twine upload dist/dmriprep*

  deployable:
    docker:
      - image: busybox:latest
    steps:
      - run: echo Deploying!

  build_docs:
    docker:
      - image: python:3.7.4
    environment:
      - FSLOUTPUTTYPE: NIFTI
      - SUBJECTS_DIR: /tmp/subjects
    steps:
      - restore_cache:
          keys:
            - docs-v1-{{ .Branch }}-{{ .Revision }}
            - docs-v1--{{ .Revision }}
            - docs-v1-{{ .Branch }}-
            - docs-v1-master
            - docs-v1-
          paths:
            - ./docs/_build/_html
      - checkout
      - run:
          name: Create subjects folder
          command: mkdir -p $SUBJECTS_DIR
      - run:
          name: Install Graphviz
          command: apt update && apt -y install graphviz
      - run:
          name: Install deps
          command: pip install --no-cache-dir -r docs/requirements.txt
      - run:
          name: Build only this commit
          command: make -C docs SPHINXOPTS="-W" BUILDDIR="_build/no_version_html" html
      - store_artifacts:
          path: ./docs/_build/no_version_html
      - run:
          name: Generate Versioned Docs
          command: |
            set +e
            force_versioned="$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[docs?[ _]?versions?\]' )"
            set -e
            if [[ "x${CIRCLE_TAG}" = "x" && "${CIRCLE_BRANCH}" != "master" && "x${force_versioned}" = "x" ]]; then
              echo "Not a tag or master branch - skipping versioned docs."
              circleci step halt
            else
              make -f ./docs/Makefile versioned CURBRANCH=${CIRCLE_TAG:-$CIRCLE_BRANCH}
            fi
      - save_cache:
          key: docs-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ./docs/_build/_html
      - persist_to_workspace:
          root: docs/_build
          paths: html
      - store_artifacts:
          path: ./docs/_build/html

  deploy_docs_tag:
    <<: *docs

  deploy_docs_master:
    <<: *docs

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - get_data:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/

      - ds000206:
          requires:
            - build
            - get_data
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/
      - ds001771:
          requires:
            - build
            - get_data
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/
      - test_deploy_pypi:
          filters:
            branches:
              only:
                - /rel\/.*/
                - /maint\/.*/
            tags:
              only: /.*/

      - deploy_docker_patches:
          requires:
            - build
          filters:
            branches:
              only: /docker\/.*/

      - deployable:
          requires:
            - build
            - build_docs
            - test_deploy_pypi
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - deploy_docker:
          requires:
            - deployable
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - deploy_pypi:
          requires:
            - deployable
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/

      - build_docs:
          filters:
            branches:
              ignore:
                - /tests?\/.*/
                - /ds000206\/.*/
                - /ds001771\/.*/
            tags:
              only: /.*/

      - deploy_docs_master:
          requires:
            - build_docs
            - test_deploy_pypi
          filters:
            branches:
              only: /master/
            tags:
              ignore: /.*/

      - deploy_docs_tag:
          requires:
            - deployable
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
