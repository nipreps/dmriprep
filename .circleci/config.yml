# reusable anchors
docs_deploy: &docs
  docker:
    - image: node:8.10.0
  steps:
    - checkout
    - attach_workspace:
        at: docs/_build
    - run:
        name: Disable jekyll builds
        command: touch docs/_build/html/.nojekyll
    - run:
        name: Install and configure dependencies
        command: |
          npm install -g --silent gh-pages@2.0.1
          git config user.email "nipreps@gmail.com"
          git config user.name "ci-build"
    - add_ssh_keys:
        fingerprints:
          - "29:00:83:05:e9:af:5d:0f:3b:18:7a:3f:0a:98:1a:ef"
    - run:
        name: Deploy docs to gh-pages branch
        command: gh-pages --dotfiles --message "doc(update) [skip ci]" --dist docs/_build/html

_machine_defaults: &machine_defaults
  environment:
    TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    SCRATCH: "/scratch"
  machine:
    image: default
    docker_layer_caching: true
  working_directory: /tmp/src/dmriprep
  resource_class: large

_python_defaults: &python_defaults
  docker:
    - image: cimg/python:3.12
  working_directory: /tmp/src/dmriprep

_docker_auth: &docker_auth
  name: Docker authentication
  command: |
    if [[ -n $DOCKER_PAT ]]; then
      echo "$DOCKER_PAT" | docker login -u $DOCKER_USER --password-stdin
    fi

_setup_docker_registry: &setup_docker_registry
  name: Set up Docker registry
  command: |
    if [[ -f /tmp/images/registry.tar.gz ]]; then
      echo "Loading saved registry image"
      docker load < /tmp/images/registry.tar.gz
    else
      echo "Pulling registry image from DockerHub"
      docker pull registry:2
    fi
    docker run -d -p 5000:5000 --restart=always --name=registry \
        -v /tmp/docker:/var/lib/registry registry:2

_pull_from_registry: &pull_from_registry
  name: Pull and tag image from local registry
  command: |
    docker pull localhost:5000/dmriprep
    docker tag localhost:5000/dmriprep nipreps/dmriprep:latest

_pull_test_image_from_registry: &pull_test_image_from_registry
  name: Pull and tag image from local registry
  command: |
    docker pull localhost:5000/dmriprep-test
    docker tag localhost:5000/dmriprep-test nipreps/dmriprep:test

_check_skip_job: &check_skip_job
  name: Check commit message and determine if job should be skipped
  command: |
    set +e
    cd /tmp/src/dmriprep
    COMMIT_MSG="$(git show -s --format=%s)"
    DOCBUILD="$(echo ${COMMIT_MSG} | grep -i -E '^docs?(\(\w+\))?:')"
    SKIP_ALL="$(echo ${COMMIT_MSG} | grep -i -E '\[skipcircle\]')"
    SKIP_PYTEST="$(echo ${COMMIT_MSG} | grep -i -E '\[skip[ _]?tests\]')"
    SKIP_DS005="$(echo ${COMMIT_MSG} | grep -i -E '\[skip[ _]?ds005\]' )"
    SKIP_DS054="$(echo ${COMMIT_MSG} | grep -i -E '\[skip[ _]?ds054\]' )"
    SKIP_DS210="$(echo ${COMMIT_MSG} | grep -i -E '\[skip[ _]?ds210\]' )"
    NO_FASTTRACK="$(echo ${COMMIT_MSG} | grep -i -E '\[no[ _-]?fasttrack\]' )"

    # no skipping if tagged build
    if [[ -n "$NO_FASTTRACK" ]]; then
      touch /tmp/.nofasttrack
      echo "Anatomical fasttrack reusing sMRIPrep's derivatives will not be used."
    elif [[ -n "$CIRCLETAG" ]]; then
      exit 0
    elif [[ -n "$DOCSBUILD" ]]; then  # always try to skip docs builds
      echo "Only docs build"
      circleci step halt
    elif [ -n "$SKIP_ALL" ]; then
      echo "Skipping all!"
      circleci step halt
    elif [ -n "$CHECK_PYTEST" -a -n "$SKIP_PYTEST" ]; then
      echo "Skipping pytest"
      circleci step halt
    elif [ -n "$CHECK_DS005" -a -n "$SKIP_DS005" ]; then
      echo "Skipping DS005"
      circleci step halt
    elif [ -n "$CHECK_DS054" -a -n "$SKIP_DS054" ]; then
      echo "Skipping DS054"
      circleci step halt
    elif [ -n "$CHECK_DS210" -a -n "$SKIP_DS210" ]; then
      echo "Skipping DS210"
      circleci step halt
    fi
    echo "No skip"

_setup_dmriprep_docker: &setup_dmriprep_docker
  name: Install dMRIPrep's docker wrapper
  command: |
    pyenv local 3
    pip install --upgrade pip
    pip install --upgrade /tmp/src/dmriprep/wrapper/

_check_outputs: &check_outputs
  name: Check outputs of dMRIPrep run
  command: |
    set +e -x
    mkdir -p /tmp/${DATASET}/test
    find /tmp/${DATASET}/${SUBDIR:-dmriprep} \
      \( -path '*/figures' -o -path '*/log' -o -path '*/sourcedata' \) \
      -prune -o -name "*" -print | cut -d/ -f 5- | sort > /tmp/${DATASET}/test/outputs.out

    FASTTRACK_OUTPUTS="${DATASET}${VARIANT}_fasttrack_outputs.txt"
    FULL_OUTPUTS="${DATASET}${VARIANT}_outputs.txt"
    RET=1
    if [ ! -f /tmp/.nofasttrack ]; then
        echo "Checking fasttrack..."
        sort /tmp/src/dmriprep/.circleci/${FASTTRACK_OUTPUTS} > /tmp/${DATASET}/test/fasttrack.out
        diff /tmp/${DATASET}/test/{fasttrack,outputs}.out
        RET=$?
    fi
    if [ $RET -ne 0 ]; then
        echo "Checking full..."
        sort /tmp/src/dmriprep/.circleci/${FULL_OUTPUTS} > /tmp/${DATASET}/test/full.out
        diff /tmp/${DATASET}/test/{full,outputs}.out
        RET=$?
    fi
    exit $RET

version: 2.1
aliases:
  - &src "/tmp/src/dmriprep"
orbs:
  docker: circleci/docker@2.1.4

jobs:
  build:
    <<: *machine_defaults
    environment:
      DOCKER_BUILDKIT: 1
    steps:
      - checkout:
          path: *src
      - run: *check_skip_job
      - restore_cache:
          keys:
            - build-v2-{{ .Branch }}-{{ .Revision }}
            - build-v2--{{ .Revision }}
            - build-v2-{{ .Branch }}-
            - build-v2-master-
            - build-v2-
          paths:
            - /tmp/docker
            - /tmp/images
      - docker/install-docker-credential-helper
      - run: *docker_auth
      - run: *setup_docker_registry
      - run:
          name: Build Docker image (production environment)
          no_output_timeout: 60m
          command: |
            pyenv local 3
            pip install hatch
            # Get version, update files.
            THISVERSION=$( hatch version )
            if [[ ${THISVERSION:0:1} == "0" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            # Build docker image
            docker buildx build --load \
                --cache-from localhost:5000/dmriprep \
                --cache-from nipreps/dmriprep:latest \
                -t nipreps/dmriprep:latest \
                --platform linux/amd64 \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" .
      - run:
          name: Build Docker image (test environment)
          no_output_timeout: 60m
          command: |
            docker buildx build --load \
                --cache-from localhost:5000/dmriprep \
                --cache-from nipreps/dmriprep:latest \
                -t nipreps/dmriprep:test \
                --platform linux/amd64 \
                --target test .
      - run:
          command: docker images
      - run:
          name: Check Docker image (production)
          command: |
            # Get version, update files.
            THISVERSION=$( hatch version )
            BUILT_VERSION=$( docker run --rm nipreps/dmriprep:latest --version )
            BUILT_VERSION=${BUILT_VERSION%$'\r'}
            BUILT_VERSION=${BUILT_VERSION#*"dMRIPrep v"}
            BUILT_VERSION=${BUILT_VERSION%.d*}
            echo "VERSION: \"$THISVERSION\""
            echo "BUILT: \"$BUILT_VERSION\""
            set -e
            test "$BUILT_VERSION" = "$THISVERSION"
      - run:
          name: Check Docker image (test)
          command: |
            docker run --rm nipreps/dmriprep:test dmriprep --version
            docker run --rm nipreps/dmriprep:test pytest --version
      - run:
          name: Docker push to local registry
          no_output_timeout: 40m
          command: |
            docker tag nipreps/dmriprep:latest localhost:5000/dmriprep
            docker tag nipreps/dmriprep:test localhost:5000/dmriprep-test
            docker push localhost:5000/dmriprep
            docker push localhost:5000/dmriprep-test
      - run:
          name: Docker registry garbage collection
          command: |
            docker exec -it registry /bin/registry garbage-collect --delete-untagged \
              /etc/docker/registry/config.yml

      - persist_to_workspace:
          root: /tmp
          paths:
            - src/dmriprep
      - save_cache:
         key: build-v2-{{ .Branch }}-{{ .Revision }}
         paths:
            - /tmp/docker
            - /tmp/images

  get_data:
    docker:
      - image: continuumio/miniconda3:master-alpine
    working_directory: /tmp/data
    environment:
      - TEMPLATEFLOW_HOME: /tmp/templateflow
    steps:
      - restore_cache:
          keys:
            - env-v1-{{ .Branch }}-
            - env-v1-master-
            - env-v1-
      - run:
          name: Setup git-annex & DataLad
          command: |
            conda install -y -c anaconda -c conda-forge git git-annex datalad
            python -m pip install --no-cache-dir -U datalad-osf
            git config --global user.name 'NiPreps Bot'
            git config --global user.email 'nipreps@gmail.com'

      - run:
          name: Setup TemplateFlow
          command: |
            python -m pip install --no-cache-dir -U templateflow
            python -c "from templateflow import api as tfapi; \
                       tfapi.get('OASIS30ANTs', resolution=1, desc=None, suffix='T1w'); \
                       tfapi.get('OASIS30ANTs', resolution=1, desc='BrainCerebellumExtraction', suffix='mask'); "

      - save_cache:
          key: env-v1-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - /tmp/templateflow
            - /opt/conda

      - restore_cache:
          keys:
            - data-v0-{{ .Branch }}-{{ .Revision }}
            - data-v0--{{ .Revision }}
            - data-v0-{{ .Branch }}-
            - data-v0-master-
            - data-v0-
      - run:
          name: Install ds001771
          command: |
            datalad install -r /tmp/data/ds001771 -s https://github.com/nipreps-data/ds001771.git
            datalad update -r --merge -d /tmp/data/ds001771
            datalad get -J 2 -r -d /tmp/data/ds001771 ds001771/sub-36/anat/*
            datalad get -J 2 -r -d /tmp/data/ds001771 ds001771/sub-36/dwi/*
            datalad get -J 2 -r -d /tmp/data/ds001771 ds001771/sub-36/fmap/*
            datalad get -J 2 -r -d /tmp/data/ds001771/derivatives/ ds001771/derivatives/smriprep-0.6.0/*
            datalad get -J 2 -r -d /tmp/data/ds001771/derivatives/ ds001771/derivatives/freesurfer-6.0.1/sub-36/mri/*
            datalad get -J 2 -r -d /tmp/data/ds001771/derivatives/ ds001771/derivatives/freesurfer-6.0.1/sub-36/surf/lh.white \
                                                         ds001771/derivatives/freesurfer-6.0.1/sub-36/surf/rh.white \
                                                         ds001771/derivatives/freesurfer-6.0.1/sub-36/surf/lh.thickness \
                                                         ds001771/derivatives/freesurfer-6.0.1/sub-36/surf/rh.thickness
      - run:
          name: Install ds000206
          command: |
            datalad install -r /tmp/data/ds000206 -s https://github.com/nipreps-data/ds000206.git
            datalad update -r --merge -d /tmp/data/ds000206
            datalad get -J 2 -r -d /tmp/data/ds000206/ ds000206/sub-05/*
            datalad get -J 2 -r -d /tmp/data/ds000206/derivatives/ ds000206/derivatives/freesurfer-6.0.1/sub-05/*
      - save_cache:
          key: data-v0-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/data/ds001771
            - /tmp/data/ds000206

      - run:
          name: Store FreeSurfer license file
          command: |
            mkdir -p /tmp/fslicense
            cd /tmp/fslicense
            echo "cHJpbnRmICJrcnp5c3p0b2YuZ29yZ29sZXdza2lAZ21haWwuY29tXG41MTcyXG4gKkN2dW12RVYzelRmZ1xuRlM1Si8yYzFhZ2c0RVxuIiA+IGxpY2Vuc2UudHh0Cg==" | base64 -d | sh
      - run:
          name: Create Nipype config files
          command: |
            mkdir -p /tmp/config
            printf "[execution]\nstop_on_first_crash = true\n" > /tmp/config/nipype.cfg
            echo "poll_sleep_duration = 0.01" >> /tmp/config/nipype.cfg
            echo "hash_method = content" >> /tmp/config/nipype.cfg

      - persist_to_workspace:
          root: /tmp
          paths:
            - fslicense
            - config/nipype.cfg
  test_pytest:
    <<: *machine_defaults
    environment:
      CHECK_PYTEST: true
    steps:
      - checkout:
          path: *src
      - run: *check_skip_job
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - build-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images
      - restore_cache:
          keys:
            - data-v0-{{ .Branch }}-{{ .Revision }}
      - docker/install-docker-credential-helper
      - run: *docker_auth
      - run: *setup_docker_registry
      - run: *pull_from_registry
      - run: *pull_test_image_from_registry
      - run:
          name: Run dMRIPrep tests
          no_output_timeout: 2h
          command: |
            docker run -ti --rm=false \
              -e TEST_READONLY_FILESYSTEM=1 -v $HOME:/home/readonly:ro \
              --entrypoint="pytest" nipreps/dmriprep:test \
              --pyargs dmriprep -svx --doctest-modules

      - store_artifacts:
          path: /tmp/data/reports

  build_docs:
    docker:
      - image: python:3.12
    environment:
      - FSLOUTPUTTYPE: NIFTI
      - SUBJECTS_DIR: /tmp/subjects
    steps:
      - restore_cache:
          keys:
            - docs-v1-{{ .Branch }}-{{ .Revision }}
            - docs-v1--{{ .Revision }}
            - docs-v1-{{ .Branch }}-
            - docs-v1-master
            - docs-v1-
          paths:
            - ./docs/_build/_html
      - checkout
      - run:
          name: Create subjects folder
          command: mkdir -p $SUBJECTS_DIR
      - run:
          name: Install Graphviz
          command: apt update && apt -y install graphviz
      - run:
          name: Install deps
          command: pip install --no-cache-dir -r docs/requirements.txt
      - run:
          name: Build only this commit
          command: make -C docs SPHINXOPTS="-W" BUILDDIR="_build/no_version_html" html
      - store_artifacts:
          path: ./docs/_build/no_version_html
      - run:
          name: Generate Versioned Docs
          command: |
            set +e
            force_versioned="$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[docs?[ _]?versions?\]' )"
            set -e
            if [[ "x${CIRCLE_TAG}" = "x" && "${CIRCLE_BRANCH}" != "master" && "x${force_versioned}" = "x" ]]; then
              echo "Not a tag or master branch - skipping versioned docs."
              circleci step halt
            else
              make -f ./docs/Makefile versioned CURBRANCH=${CIRCLE_TAG:-$CIRCLE_BRANCH}
            fi
      - save_cache:
          key: docs-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ./docs/_build/_html
      - persist_to_workspace:
          root: docs/_build
          paths: html
      - store_artifacts:
          path: ./docs/_build/html

  deploy_docs_tag:
    <<: *docs

  deploy_docs_master:
    <<: *docs

  deploy_docker_patches:
    <<: *machine_defaults
    working_directory: *src
    steps:
      - run:
          name: Check whether image should be deployed to Docker Hub
          command: |
            if [[ "$CIRCLE_PROJECT_USERNAME" != "nipreps" ]]; then
              echo "Nothing to deploy for $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME."
              circleci step halt
            fi
      - restore_cache:
          keys:
            - build-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images
      - docker/install-docker-credential-helper
      - run: *docker_auth
      - run: *setup_docker_registry
      - run: *pull_from_registry
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            # Format: docker/[<version-like>+]<tag> -> nipreps/dmriprep:<tag>
            # <version-like>+<tag> guides setuptools_scm to get the right major/minor
            docker tag nipreps/dmriprep nipreps/dmriprep:${CIRCLE_BRANCH##*[/+]}
            docker push nipreps/dmriprep:${CIRCLE_BRANCH##*[/+]}

  deploy_docker:
    <<: *machine_defaults
    steps:
      - checkout:
          path: *src
      - run: *check_skip_job
      - restore_cache:
          keys:
            - build-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images
      - docker/install-docker-credential-helper
      - run: *docker_auth
      - run: *setup_docker_registry
      - run: *pull_from_registry
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PAT" ]]; then
              echo "$DOCKER_PAT" | docker login -u $DOCKER_USER --password-stdin
              docker tag nipreps/dmriprep nipreps/dmriprep:unstable
              docker push nipreps/dmriprep:unstable
              if [[ -n "$CIRCLE_TAG" ]]; then
                docker push nipreps/dmriprep:latest
                docker tag nipreps/dmriprep nipreps/dmriprep:$CIRCLE_TAG
                docker push nipreps/dmriprep:$CIRCLE_TAG
              fi
            fi

  test_deploy_pypi:
    <<: *python_defaults
    steps:
      - checkout
      - run:
          name: Update build tools
          command: pip install --upgrade build twine hatch
      - run:
          name: Build dMRIPrep
          command: python -m build
      - run:
          name: Twine check dmriprep
          command: twine check dist/*
      - run:
          name: Pre-run hatch version
          command: hatch version
      - store_artifacts:
          path: /tmp/src/dmriprep/dist
      - run:
          name: Check sdist distribution
          command: |
            THISVERSION=$( hatch version )
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            virtualenv --python=python sdist
            source sdist/bin/activate
            python -m pip install --upgrade pip
            python -m pip install dist/dmriprep*.tar.gz
            which dmriprep | grep sdist\\/bin
            INSTALLED_VERSION=$(dmriprep --version)
            INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
            INSTALLED_VERSION=${INSTALLED_VERSION#*"dMRIPrep v"}
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VERSION\""
            test "$INSTALLED_VERSION" = "$THISVERSION"
      - run:
          name: Check wheel distribution
          command: |
            THISVERSION=$( hatch version )
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            virtualenv --python=python wheel
            source wheel/bin/activate
            python -m pip install dist/dmriprep*.whl
            which dmriprep | grep wheel\\/bin
            INSTALLED_VERSION=$(dmriprep --version)
            INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
            INSTALLED_VERSION=${INSTALLED_VERSION#*"dMRIPrep v"}
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VERSION\""
            test "$INSTALLED_VERSION" = "$THISVERSION"
      - run:
          name: Build dmriprep-docker
          command: python -m build wrapper
      - run:
          name: Twine check wrapper
          command: twine check wrapper/dist/*
      - store_artifacts:
          path: /tmp/src/dmriprep/wrapper/dist

  deploy_pypi:
    <<: *python_defaults
    steps:
      - checkout
      - run:
          name: Update build tools
          command: pip install --upgrade build twine
      - run:
          name: Build dMRIPrep
          command: python -m build
      - run:
          name: Build dmriprep-docker
          command: python -m build wrapper/
      - run:
          name: Upload packages to PyPI
          command: python -m twine upload dist/dmriprep* wrapper/dist/dmriprep*

  deployable:
    docker:
      - image: busybox:latest
    steps:
      - run: echo Deploying!

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          context:
            - nipreps-common
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - get_data:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/


      - test_deploy_pypi:
          context:
            - nipreps-common
          filters:
            branches:
              only:
                - /rel\/.*/
                - /maint\/.*/
            tags:
              only: /.*/

      - test_pytest:
          context:
            - nipreps-common
          requires:
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /ds001771\/.*/
                - /ds000206\/.*/
                - /docker\/.*/
            tags:
              only: /.*/

      - build_docs:
          context:
            - nipreps-common
          filters:
            branches:
              ignore:
                - /tests?\/.*/
                - /ds000206\/.*/
                - /ds001771\/.*/
            tags:
              only: /.*/

      - deploy_docs_master:
          context:
            - nipreps-common
          requires:
            - build_docs
            - test_deploy_pypi
          filters:
            branches:
              only: /master/
            tags:
              ignore: /.*/

      - deploy_docs_tag:
          requires:
            - deployable
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/


      - deploy_docker_patches:
          context:
            - nipreps-common
          requires:
            - build
          filters:
            branches:
              only: /docker\/.*/

      - deployable:
          requires:
            - test_deploy_pypi
            - test_pytest
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - deploy_docker:
          context:
            - nipreps-common
          requires:
            - deployable
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - deploy_pypi:
          context:
            - nipreps-common
          requires:
            - deployable
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
